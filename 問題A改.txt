import math
import collections
import copy
a,b,c,d,e = map(int,input().split(' '))#ヘッダ(a:道路情報の行数、b:交差点情報の行数、c:駐車可能箇所情報の行数、d:配達先情報の行数、e:クエリの行数)
road_info=[input().split(' ') for i in range(a)]#道路情報
inter_info=[input().split(' ') for i in range(b)]#交差点情報
park_info=[input().split(' ') for i in range(c)]#駐車可能箇所情報
ship_info=[input().split(' ') for i in range(d)]#配達先情報
query=[input().split(' ') for i in range(e)]#クエリ
park_copy=copy.deepcopy(park_info)

inter=[]#交差点の空集合
for i in range(b):
  inter.append(inter_info[i][0])
inter=list(set(inter))#set()で重複した要素を削除

park=[]#駐車場の空集合
for i in range(c):
  park.append(park_info[i][0])
park_replace = [s.replace('ES', 'SE') for s in park]#c(park_info)のESをSEに変更
park_replace = list(set(park_replace))#set()で重複した要素を削除



#各道路に含まれるノードとそのSからの距離
def get_unique_list(seq):
    seen = []
    return [x for x in seq if x not in seen and not seen.append(x)]
keisan_sharyo=[[] for i in range(a)]
keisan_daisha=[[] for i in range(a)]
for i in range(a):
  for j in range(c):
    park_info[j][0]=park_info[j][0].replace('ES','SE')
    if park_info[j][1]==road_info[i][0]:
      keisan_sharyo[i].append([park_info[j][0],park_info[j][2]])
      keisan_daisha[i].append([park_info[j][0],park_info[j][2]])
  for m in range(d):
    if ship_info[m][1]==road_info[i][0]:
      keisan_daisha[i].append([ship_info[m][0],ship_info[m][2]])
#intに直す
for i in range(a):
  for j in range(len(keisan_daisha[i])):
    keisan_daisha[i][j][1] = int(keisan_daisha[i][j][1])
for i in range(a):
  for j in range(len(keisan_sharyo[i])):
    keisan_sharyo[i][j][1] = int(keisan_sharyo[i][j][1])
from operator import itemgetter
#SE,ESをSEに統一
for i in range(a):
  keisan_sharyo[i].sort(key=itemgetter(1))
  keisan_sharyo[i] = get_unique_list(keisan_sharyo[i])
  keisan_daisha[i].sort(key=itemgetter(1))
  keisan_daisha[i] = get_unique_list(keisan_daisha[i])

  
#各道路の始点に一番近い&遠いノードとSからの距離を出す
node_min_daisha = []#台車の始点に近いノード
node_max_daisha = []#台車の終点に近いノード
for i in range(a):
  if not keisan_daisha[i]:#道路上にノードがないとき
    keisan_daisha[i].append(0)#0を入れる．
  node_min_daisha.append(keisan_daisha[i][0])
  node_max_daisha.append(keisan_daisha[i][-1])
#print(node_min_daisha)
#print(node_max_daisha)
 

#AB地点間の距離を求める(A B 距離コスト)
cost0=[[] for i in range(a)]#車両のエッジのコスト
cost1=[[] for i in range(a)]#台車のエッジのコスト
cost_road=[]
for i in range(a):
#A(始点)求める
    A = 0#A(交差点，始点)
    for j in range(b):
      if road_info[i][0] in inter_info[j][2]:
        if "SE" in inter_info[j][2]:
          A = inter_info[j][0]
      if road_info[i][0] in inter_info[j][1]:
        if "ES" in inter_info[j][1]:
          A = inter_info[j][0]
#B(終点)求める
    B = 0
    for j in range(b):
      if road_info[i][0] in inter_info[j][2]:
        if "ES" in inter_info[j][2]:
          B = inter_info[j][0]
      if road_info[i][0] in inter_info[j][1]:
        if "SE" in inter_info[j][1]:
          B = inter_info[j][0]
    cost_road.append([road_info[i][0],A,B,road_info[i][1],road_info[i][2]])
#cost計算
#車両の時，cost0
    if node_min_daisha[i] == 0:#道路iに駐車可能箇所が存在しない
      for j in range(1):
        cost0[i].append([A,B,road_info[i][1]])
        if road_info[i][2]==0:
          cost0[i].append([B,A,road_info[i][1]])
          
    else:#道路iに駐車可能箇所が存在
      for j in range(len(keisan_daisha[i])):
        if keisan_daisha[i][j][0]==node_min_daisha[i][0]:#ノードjが最も始点に近い時
          cost0[i].append([A,keisan_daisha[i][j][0],keisan_daisha[i][j][1]])
          if int(road_info[i][2])==0:
            cost0[i].append([keisan_daisha[i][j][0],A,keisan_daisha[i][j][1]])  
            if len(keisan_daisha[i])==1:
              cost0[i].append([keisan_daisha[i][j][0],B,abs(int(road_info[i][1])-int(keisan_daisha[i][j][1]))])
              cost0[i].append([B,keisan_daisha[i][j][0],abs(int(road_info[i][1])-int(keisan_daisha[i][j][1]))])
          elif len(keisan_daisha[i])==1:
            cost0[i].append([keisan_daisha[i][j][0],B,abs(int(road_info[i][1])-int(keisan_daisha[i][j][1]))])             
        elif keisan_daisha[i][j][0]==node_max_daisha[i][0]:#ノードjが最も終点に近い時
          cost0[i].append([keisan_daisha[i][j-1][0],keisan_daisha[i][j][0],abs(int(keisan_daisha[i][j-1][1])-int(keisan_daisha[i][j][1]))])
          cost0[i].append([keisan_daisha[i][j][0],B,abs(int(road_info[i][1])-int(keisan_daisha[i][j][1]))])
          if int(road_info[i][2])==0:
            cost0[i].append([keisan_daisha[i][j][0],keisan_daisha[i][j-1][0],abs(int(keisan_daisha[i][j-1][1])-int(keisan_daisha[i][j][1]))])
            cost0[i].append([B,keisan_daisha[i][j][0],abs(int(road_info[i][1])-int(keisan_daisha[i][j][1]))])
        else:#その他
          if j - (j-1) != 1:
            break;
          if len(keisan_daisha[i])!=1:
            cost0[i].append([keisan_daisha[i][j-1][0],keisan_daisha[i][j][0],abs(int(keisan_daisha[i][j-1][1])-int(keisan_daisha[i][j][1]))])
            if int(road_info[i][2])==0:
              cost0[i].append([keisan_daisha[i][j][0],keisan_daisha[i][j-1][0],abs(int(keisan_daisha[i][j-1][1])-int(keisan_daisha[i][j][1]))])
            
#台車の時，cost1            
    if node_min_daisha[i] == 0:#道路iに駐車可能箇所が存在しない
      for j in range(1):
        cost1[i].append([A,B,road_info[i][1]])
        cost1[i].append([B,A,road_info[i][1]])
    else:#道路iに駐車可能箇所が存在
      for j in range(len(keisan_daisha[i])):
        if keisan_daisha[i][j][0]==node_min_daisha[i][0]:#ノードjが最も始点に近い時
          cost1[i].append([A,keisan_daisha[i][j][0],keisan_daisha[i][j][1]])
          cost1[i].append([keisan_daisha[i][j][0],A,keisan_daisha[i][j][1]])
          if len(keisan_daisha[i])==1:
            cost1[i].append([keisan_daisha[i][j][0],B,abs(int(road_info[i][1])-int(keisan_daisha[i][j][1]))])
            cost1[i].append([B,keisan_daisha[i][j][0],abs(int(road_info[i][1])-int(keisan_daisha[i][j][1]))])
        elif keisan_daisha[i][j][0]==node_max_daisha[i][0]:#ノードjが最も終点に近い時
          cost1[i].append([keisan_daisha[i][j-1][0],keisan_daisha[i][j][0],abs(int(keisan_daisha[i][j-1][1])-int(keisan_daisha[i][j][1]))])
          cost1[i].append([keisan_daisha[i][j][0],B,abs(int(road_info[i][1])-int(keisan_daisha[i][j][1]))])
          cost1[i].append([keisan_daisha[i][j][0],keisan_daisha[i][j-1][0],abs(int(keisan_daisha[i][j-1][1])-int(keisan_daisha[i][j][1]))])
          cost1[i].append([B,keisan_daisha[i][j][0],abs(int(road_info[i][1])-int(keisan_daisha[i][j][1]))])
        else:#その他
          if j - (j-1) != 1:
            break;
          if len(keisan_daisha[i])!=1:
            cost1[i].append([keisan_daisha[i][j-1][0],keisan_daisha[i][j][0],abs(int(keisan_daisha[i][j-1][1])-int(keisan_daisha[i][j][1]))])
            cost1[i].append([keisan_daisha[i][j][0],keisan_daisha[i][j-1][0],abs(int(keisan_daisha[i][j-1][1])-int(keisan_daisha[i][j][1]))])

for i in range(a):
  for j in range(len(cost0[i])):
    cost0[i]=[m for m in cost0[i] if cost0[i][j][2]  != 0]
cost0 = [x for x in cost0 if x]

for i in range(a):
  for j in range(len(cost1[i])):
    cost1[i]=[m for m in cost1[i] if cost1[i][j][2]  != 0]
cost1= [x for x in cost1 if x]
#print("車両:[始点,終点,エッジの長さ]")
#print(cost0)
#print("台車:[始点,終点,エッジの長さ]")
#print(cost1)


#nodeとedgeの数を求める
#車両の場合
node_sharyo=len(collections.Counter(inter))+len(collections.Counter(park_replace))+d
edge_sharyo = 0
for i in range(a):
  if int(road_info[i][2]) == 0:
     edge_sharyo +=(len(keisan_daisha[i])+1)*2
  else:
     edge_sharyo +=(len(keisan_daisha[i])+1)
#台車の場合
node_daisha=len(collections.Counter(inter))+len(collections.Counter(park_replace))+d
edge_daisha=(len(collections.Counter(park_replace))+d+a)*2#台車の場合のエッジ数



#最短経路の解法：ダイグストラ法の定義
def dijkstra(s,n,w,cost):
    #始点sから各頂点への最短距離
    #n:頂点数,　w:辺の数, cost[u][v] : 辺uvのコスト(存在しないときはinf)
    d = [float("inf")] * n
    used = [False] * n
    d[s] = 0
    
    while True:
        v = -1
        #まだ使われてない頂点の中から最小の距離のものを探す
        for i in range(n):
            if (not used[i]) and (v == -1):
               v = i
            elif (not used[i]) and d[i] < d[v]:
                v = i
        if v == -1:
               break
        used[v] = True
               
        for j in range(n):
               d[j] = min(d[j],d[v]+cost[v][j])
    return d
  
  
#unchi=0
#for i in range(a):
  #unchi+=len(cost1[i])
#print(cost1)
################################
 #n:頂点数　w:辺の数
node=[]
for i in range(len(inter)):
  node.append([inter[i]])
for i in range(len(park_replace)):
  node.append([park_replace[i]])
for i in range(len(ship_info)):
  node.append([ship_info[i][0]])
for i in range(len(node)):
  node[i].append(i)
#print(node)
cost = [[float("inf") for i in range(node_daisha)] for i in range(node_daisha)]
#cost = [[float("inf") for i in range(node_daisha)] for i in range(node_daisha)] 
#cost[u][v] : 辺uvのコスト(存在しないときはinf この場合は10**10)
costcost=[[float("inf") for i in range(node_daisha)] for i in range(node_daisha)]


for i in range(len(node)):
  for j in range(len(cost1)):
    for k in range(len(cost1[j])):
      if node[i][0]==cost1[j][k][0]:
        cost1[j][k][0]=node[i][1]
      if node[i][0]==cost1[j][k][1]:
        cost1[j][k][1]=node[i][1]
for i in range(len(cost1)):
  for j in range(len(cost1[i])):
    x,y,z = int(cost1[i][j][0]),int(cost1[i][j][1]),int(cost1[i][j][2])
    cost[x][y] = z
    #cost[y][x] = z

for i in range(len(node)):
  for j in range(len(cost0)):
    for k in range(len(cost0[j])):
      if node[i][0]==cost0[j][k][0]:
        cost0[j][k][0]=node[i][1]
      if node[i][0]==cost0[j][k][1]:
        cost0[j][k][1]=node[i][1]
for i in range(len(cost0)):
  for j in range(len(cost0[i])):
    x,y,z = int(cost0[i][j][0]),int(cost0[i][j][1]),int(cost0[i][j][2])
    costcost[x][y] = z
    
#print(costcost)   
for i in range(e):
  if int(query[i][0])==1:#台車の移動
    query[i][1]=query[i][1].replace('ES','SE')
    query[i][2]=query[i][2].replace('ES','SE')
    for j in range(len(node)):
      if query[i][1]==node[j][0]:
        s=node[j][1]
      if query[i][2]==node[j][0]:
        d=node[j][1]
    result=dijkstra(s,node_daisha,edge_daisha,cost)
    print(result[d])
  else:#車両の移動
    for j in range(c):
      if query[i][1]==park_copy[j][0]:
        s_road=park_copy[j][1]
        start=j
      elif query[i][2]==park_copy[j][0]:
        d_road=park_copy[j][1]
        dest=j
    for k in range(a):
      if s_road==cost_road[k][0]:
        s_index=k
      elif d_road==cost_road[k][0]:
        d_index=k
    if 'SE' in query[i][1]:
      s_pass=int(cost_road[s_index][3])-int(park_copy[start][2])
    else:
      s_pass=int(park_copy[start][2])
  
    if 'SE' in query[i][2]:
      d_pass=int(park_copy[dest][2])
    else:
      d_pass=int(cost_road[d_index][3])-int(park_copy[dest][2])
      
    for m in range(len(node)):
      if ('SE'in query[i][1])and(cost_road[s_index][2]==node[m][0]):
        s=node[m][1]
      elif('ES'in query[i][1])and(cost_road[s_index][1]==node[m][0]):
        s=node[m][1]
      if ('SE'in query[i][2])and(cost_road[d_index][1]==node[m][0]):
        d=node[m][1]
      elif('ES'in query[i][2])and(cost_road[d_index][2]==node[m][0]):
        d=node[m][1]
    query[i][1]=query[i][1].replace('ES','SE')
    for j in range(len(node)):
      if query[i][1]==node[j][0]:
        sp=node[j][1]
      if cost_road[s_index][1]==node[j][0]:
        tr=node[j][1]
    reset=copy.deepcopy(costcost[sp][tr])
    costcost[sp][tr]=float("inf")
    edge_sharyo_kai=edge_sharyo-1
    result=dijkstra(s,node_sharyo,edge_sharyo_kai,costcost)
    print(s_pass+result[d]+d_pass)
    costcost[sp][tr]=reset
  
